<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
      xmlns:pattern="http://www.mulesoft.org/schema/mule/pattern"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
      xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
   http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/pattern http://www.mulesoft.org/schema/mule/pattern/current/mule-pattern.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd"
      version="3.4.1">


    <jms:activemq-connector name="jmsConnector" persistentDelivery="true" durable="true"
                            brokerURL="tcp://localhost:61616" doc:name="Active MQ"/>

    <jms:activemq-xa-connector name="jmsXAConnector"
                               brokerURL="tcp://localhost:61616" doc:name="Active MQ"/>

    <spring:beans>
        <!--<spring:import resource="spring-mule-config.xml"/>-->
    </spring:beans>

    <!--<custom-transformer name="UCBeforeJsonTransformer" class="com.ucweb.esb.com.ucweb.esb.transformer.UCTransformer" doc:name="UCBeforeJsonTransformer">-->
    <!--<spring:property name="dataTransformer" ref="BeforeJsonTransformer"/>-->
    <!--</custom-transformer>-->
    <!--<custom-transformer name="UCAfterJsonTransformer" class="com.ucweb.esb.com.ucweb.esb.transformer.UCTransformer" doc:name="UCAfterJsonTransformer">-->
    <!--<spring:property name="dataTransformer" ref="AfterJsonTransformer"/>-->
    <!--</custom-transformer>-->

    <byte-array-to-string-transformer name="byte-to-string"/>
    <string-to-byte-array-transformer name="string-to-byte"/>

    <!--<pattern:http-proxy name="logjson-proxy" transformer-refs="byte-to-string UCBeforeJsonTransformer"-->
    <!--responseTransformer-refs="byte-to-string UCAfterJsonTransformer"-->
    <!--inboundAddress="http://10.1.45.208:7070/logjson"-->
    <!--outboundAddress="http://10.1.45.208:9000/logjson">-->
    <!--</pattern:http-proxy>-->

    <flow name="beforeProxy1">
        <http:inbound-endpoint address="http://localhost:8079/baidu"/>
        <scripting:component>
            <scripting:script engine="groovy">
                println(new java.util.Date());
            </scripting:script>
        </scripting:component>
        <vm:outbound-endpoint exchange-pattern="request-response" address="vm://proxy1"/>
        <copy-properties propertyName="*"/>
    </flow>

    <pattern:bridge name="baiduProxy1" exchange-pattern="request-response"
                    inboundAddress="vm://proxy1" outboundAddress="http://www.baidu.com"/>

    <pattern:bridge name="baiduProxy2" exchange-pattern="request-response"
                    inboundAddress="http://localhost:8079/baidu/proxy" outboundAddress="http://www.baidu.com"/>

    <flow name="beforeProxy2">
        <http:inbound-endpoint address="http://localhost:8079/baidu/proxy/2"/>
        <scripting:component>
            <scripting:script engine="groovy">
                println(new java.util.Date());
            </scripting:script>
        </scripting:component>
        <http:outbound-endpoint address="http://localhost:8079/baidu/proxy2"/>
        <copy-properties propertyName="*"/>
    </flow>

    <pattern:http-proxy name="baiduProxy3" inboundAddress="http://localhost:8079/baidu/proxy2"
                        outboundAddress="http://www.baidu.com"/>

    <flow name="baiduProxy66">
        <http:inbound-endpoint exchange-pattern="request-response" address="http://127.0.0.1:8079/baidu/proxy66"/>
        <echo-component></echo-component>
        <copy-properties propertyName="*"/>
        <http:outbound-endpoint
                address="http://127.0.0.1:9000/action/invoke?name=#[message.inboundProperties['http.method']]"/>
    </flow>


    <flow name="test-flow-2">
        <http:inbound-endpoint exchange-pattern="request-response" address="http://127.0.0.1:8066/service/proxy2">
        </http:inbound-endpoint>
        <scripting:component>
            <scripting:script engine="groovy" file="service_monitor.groovy">
                <property key="serviceMonitorUrl" value="http://localhost:9000/service/check"/>
            </scripting:script>
        </scripting:component>
        <custom-interceptor class="com.ggd543.esb.interceptor.RoleChecker"/>
        <http:outbound-endpoint exchange-pattern="request-response"
                                address="http://127.0.0.1:9000/action/invoke?#[message.inboundProperties['http.query.string']]">
            <byte-array-to-string-transformer/>
            <transformer ref="BeforeActionTransformer"/>
            <copy-properties propertyName="http.*"/>
            <response>
                <byte-array-to-string-transformer/>
                <transformer ref="AfterActionTransformer"/>
            </response>
        </http:outbound-endpoint>
        <choice-exception-strategy>
            <catch-exception-strategy when="#[exception.causedBy(com.ggd543.esb.exception.BeforeException)]">
                <scripting:component>
                    <scripting:script engine="groovy">
                        return "an before exception"
                    </scripting:script>
                </scripting:component>
            </catch-exception-strategy>
            <catch-exception-strategy when="#[exception.causedBy(com.ggd543.esb.exception.AfterException)]">
                <scripting:component>
                    <scripting:script engine="groovy">
                        return "an after exception"
                    </scripting:script>
                </scripting:component>
            </catch-exception-strategy>
            <catch-exception-strategy>
                <scripting:component>
                    <scripting:script engine="groovy">
                        return "an general exception "
                    </scripting:script>
                </scripting:component>
            </catch-exception-strategy>
        </choice-exception-strategy>

    </flow>



</mule>
